cmake_minimum_required(VERSION 2.8...3.20)
project(jc3DTest
	VERSION 0.1.0
	DESCRIPTION "A test to get CMake and Vcpkg to work to build project chapters for 3D Graphics Rendering Cookbook"
	LANGUAGES CXX C)
	
# Debugging cmake
include(CMakePrintHelpers)

message(STATUS "Building ${PROJECT_NAME}")

option(BUILD_WITH_EASY_PROFILER "Enable EasyProfiler usage" OFF)
option(BUILD_WITH_OPTICK "Enable Optick usage" OFF)

set(EASY_PROFILER_NO_GUI ON CACHE BOOL "")
set(EASY_PROFILER_NO_SAMPLES ON CACHE BOOL "")
	
# use folders
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(WIN32)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif()

if(MSVC)
	add_definitions(-D_CONSOLE)
endif()

option(BUILD_SHARED_LIBS "Build Shared Libraries" OFF)
# TODO: configure externals

set(LIB_TYPE STATIC)

if(BUILD_SHARED_LIBS)
	set(LIB_TYPE SHARED)
endif()

# Configure assets header file 
configure_file(src/helpers/RootDir.h.in src/helpers/RootDir.h)
include_directories(${CMAKE_BINARY_DIR}/src)

# external dependencies
add_subdirectory(extern/src/etc2comp)

include_directories(extern/src/etc2comp/EtcLib/Etc)
include_directories(extern/src/etc2comp/EtcLib/EtcCodec)

set_property(TARGET EtcLib 	PROPERTY FOLDER "ThirdPartyLibraries")
set_property(TARGET EtcTool	PROPERTY FOLDER "ThirdPartyLibraries")

if(BUILD_WITH_EASY_PROFILER)
	message("Enabled EasyProfiler")	
	add_subdirectory(extern/src/easy_sources)
	add_definitions(-DBUILD_WITH_EASY_PROFILER=1)
	include_directories(extern/src/easy_profiler/include)
	set_property(TARGET easy_profiler PROPERTY FOLDER "ThirdPartyLibraries")
#	set_property(TARGET profile_converter PROPERTY FOLDER "ThirdPartyLibraries")
endif()
if(BUILD_WITH_OPTICK)
	message("Enabled Optick")
	add_subdirectory(extern/src/optick)
	add_definitions(-DBUILD_WITH_OPTICK=1)
	set_property(TARGET OptickCore PROPERTY FOLDER "ThirdPartyLibraries")
endif()

# Find required packages
find_package(glad CONFIG REQUIRED)
if(glad_FOUND)
	message(STATUS "Found GLAD")
else()
	message(STATUS "GLAD NOT FOUND!")
endif()
find_package(glfw3 CONFIG REQUIRED)
if(glfw3_FOUND)
	message(STATUS "Found GLFW3")
else()
	message(STATUS "GLFW3 NOT FOUND!")
endif()
find_package(volk CONFIG REQUIRED)
if(volk_FOUND)
	message(STATUS "Found VOLK")
else()
	message(STATUS "VOLK NOT FOUND!")
endif()
find_package(glslang CONFIG REQUIRED)
if(glslang_FOUND)
	message(STATUS "Found GLSLANG")
else()
	message(STATUS "GLSLANG NOT FOUND!")
endif()
find_package(assimp CONFIG REQUIRED)
if(assimp_FOUND)
	message(STATUS "Found ASSIMP")
else()
	message(STATUS "ASSIMP NOT FOUND!")
endif()
find_package(glm CONFIG REQUIRED)
if(glm_FOUND)
	message(STATUS "Found GLM")
else()
	message(STATUS "GLM NOT FOUND!")
endif()
find_package(imgui CONFIG REQUIRED)
if(imgui_FOUND)
	message(STATUS "Found IMGUI")
else() 
	message(STATUS "IMGUI NOT FOUND!") 
endif()
find_package(taskflow CONFIG REQUIRED) 
if(taskflow_FOUND)
	message(STATUS "Found TASKFLOW")
else() 
	message(STATUS "TASKFLOW NOT FOUND!")
endif() 
find_package(meshoptimizer CONFIG REQUIRED)
if(meshoptimizer_FOUND)
	message(STATUS "Found MESHOPTIMIZER")
else()
	message(STATUS "MESHOPTIMIZER NOT FOUND!")
endif()

add_subdirectory(src/libs)
add_subdirectory(src/apps/jc3DCh02_Assimp)
if(BUILD_WITH_EASY_PROFILER)
	add_subdirectory(src/apps/jc3DCh02_EasyProfiler)
endif()
add_subdirectory(src/apps/jc3DCh02_ETC2Comp)
add_subdirectory(src/apps/jc3DCh02_ImGui)
add_subdirectory(src/apps/jc3DCh02_MeshOptimizer)
if(BUILD_WITH_OPTICK)
	add_subdirectory(src/apps/jc3DCh02_Optick)
endif()
add_subdirectory(src/apps/jc3DCh02_STB)
add_subdirectory(src/apps/jc3DCh02_Taskflow)
add_subdirectory(src/apps/jc3DCh03_GL01ApiWrapping)
add_subdirectory(src/apps/jc3DCh03_GL02VtxPulling)
add_subdirectory(src/apps/jc3DCh03_GL03CubeMap)
add_subdirectory(src/apps/jc3DCh03_VK01_GLSLang)